--1. Which is the most watched movie?
		select c.content_id, title,watched
		from (
			   select content_id,sum(user_duration) as watched,content_duration,
			   DENSE_RANK() over(order by sum(user_duration) desc) as ranks
			   from consumption_data
			   group by content_id,content_duration
			 )
		as m,catalogue_data as c
		where ranks=1 and c.content_id=m.content_id and c.duration_min=m.content_duration;

--2. Which movies has not been watched at all?
		select title --,sum(co.user_duration) as watched
		from catalogue_data as ca
		left join consumption_data as co
		on ca.content_id=co.content_id and ca.duration_min=co.content_duration
		group by title
		having sum(co.user_duration) is null;

--3. Calculate the % of total revenue generated by the different plan types
		SELECT plan_type, SUM(amount_paid),
		   SUM(amount_paid) / (SELECT SUM(amount_paid) FROM subscription_data WHERE plan_type IS NOT NULL) *100 AS [REVENUE%]
		FROM subscription_data
		WHERE plan_type IS NOT NULL
		GROUP BY plan_type;

--4. Which movies are helping us aquire most number of users?
		SELECT TOP 10 title, COUNT(B.userid) AS USER_COUNT
		FROM catalogue_data AS A
		INNER JOIN consumption_data AS B
		ON A.content_id = B.content_id
				AND
		  A.duration_min = B.content_duration
		INNER JOIN rating_data AS C
		ON C.userid = B.userid
		WHERE C.rating IN ('AWESOME', 'GOOD')
		GROUP BY title
		ORDER BY USER_COUNT DESC

-----------------------------EXTRA----------------------------------------------------
		with movie_rank
		  as(
			  select content_id , count(userid) as [no of users],
			  DENSE_RANK() over(order by count(userid) desc) as ranks
			  from consumption_data
			  group by content_id
			)
		select top 10 title ,ranks,[no of users]
		from movie_rank as m, catalogue_data as c
		where m.content_id=c.content_id --and m.ranks=1;
		order by ranks;
		
--5. All content which has been live for last 6 months
		select title ,duration_min
		from catalogue_data
		where status='live' and date_added>= (select dateadd(MONTH,-6,max(date_added)) from catalogue_data);


--=================================SUBSCRIPTION ANALYSIS==================================

--1. Total Subscriptions
		select count(subscription_key) as [Total Subscriptions]
		from subscription_data;

--2. Total Revenue from Subscriptions
		SELECT ROUND( SUM(amount_paid), 3) AS REVENUE
		FROM subscription_data;	

--3. Average Revenue per Subscription:
		select plan_type,avg(amount_paid) as [Avg Revenue]
		from subscription_data
		where plan_type is not null
		group by plan_type;

--4. Subscriptions percentage by plan type
		select plan_type, count(subscription_key)*100.00/(select count(subscription_key) from subscription_data where plan_type is not null) as [Subscripitons %]
		from subscription_data
		where plan_type is not null
		group by plan_type;

--5. Subscriptions percentage by plan duration
		select subscription_length as [PLAN_DURATION(DAYS)],
		count(subscription_key)*100.00/(select count(subscription_key) from subscription_data where plan_type is not null) as [Subscripitons %]
		from subscription_data
		group by subscription_length
		order by [Subscripitons %] desc;

--6. Calculate the total revenue generated per month.
		select month(subscription_start_date) as months , sum(amount_paid) as [Total Revenue]
		from subscription_data
		group by month(subscription_start_date)
		order by months;

--7. Monthly New Subscriptions:
		with sub
		  as (
			   select month(subscription_start_date) as months, count(subscription_key) as Subscription, 
			   lag(count(subscription_key),1) over(order by month(subscription_start_date)) as prev_sub
			   from subscription_data
			   group by month(subscription_start_date) 
			 )
		select months,Subscription,(Subscription-prev_sub) as [New Subscriptions]
		from sub;

--8. Understanding when users are purchasing
		with sub
		  as (
			   select month(subscription_start_date) as months, count(subscription_key) as Subscription, format(subscription_start_date,'MMMM') as names,
			   lag(count(subscription_key),1) over(order by month(subscription_start_date)) as prev_sub
			   from subscription_data
			   group by month(subscription_start_date) ,format(subscription_start_date,'MMMM')
			 ),
		 ret_mon
		   as (
			   select months,Subscription,(Subscription-prev_sub) as [New Subscriptions],names,
			   dense_rank() over(order by (Subscription-prev_sub) desc) as ranks
			   from sub 
			 )
			 select months,names
			 from ret_mon
			 where ranks in (1,2);


--=================================CONTENT ANALYSIS===================================

--1. Total content
		select count(distinct title) as [Total Content]
		from catalogue_data;

--2. Total content split by paid & free
		select accesslevel , count(accesslevel) as [Access Count]
		from catalogue_data
		group by accesslevel;

--3. Total content split by status
		select status , count(accesslevel) as [Status Count]
		from catalogue_data
		group by status;

--4. Month of month content added to the paltform
		with MOM
		  as (
			   select month(date_added) as month_no , format(date_added , 'MMMM') as Months, count(distinct content_id) as [No of Content],
			   lag(count(distinct content_id),1) over(order by month(date_added)) as pre_content
			   from catalogue_data
			   group by month(date_added),format(date_added , 'MMMM')
			 )
		select months, [No of Content],([No of Content]-pre_content) as [MOM Content], 
		([No of Content]-pre_content)*100/pre_content  as [% MOM Content]
		from MOM;

--5. Compare MoM count of Indian content added to the platform vs other content added
		select month(date_added) as Month_no, format(date_added,'MMMM') as Months,
		case
		   when country like '%India%'
		      then 'india'
		   else
		      'Others'
		end as Countries, count(country) as Content
		from catalogue_data
		group by month(date_added),format(date_added,'MMMM'),
		case when country like '%India%' then 'india' else 'Others' end
		order by month_no;

--6. Average duration of content
		select concat(avg(duration_min),' Min') as [Average Duration of Content] 
		from catalogue_data;

--7.Which content is pulling in the most number of users?
		select title, [total no of user]
		from (
			   select title , count(usersessionid) as [total no of user] ,
			   dense_rank() over(order by count(usersessionid) desc) as ranks
			   from consumption_data as a
			   inner join catalogue_data as b
			   on a.content_id=b.content_id and a.content_duration=b.duration_min
			   group by title
		     ) 
		as most_user
		where ranks=1;

-- 8. Different genres of content with the content count
		select listed_in, count(title) as [Content Count]
		from catalogue_data
		group by listed_in
		order by [Content Count] desc;

--======================================RATING DASKBOARD===========================================

--1. Different rating categories given by the users
		select distinct Rating
		from rating_data ;

--2. Total Content whose rating is not given by the users
		select count(distinct c.content_id) as [Total Content Not Rated]
		from rating_data as R
		right join consumption_data as C
		on c.userid=r.userid and c.usersessionid=r.usersessionid
		inner join catalogue_data as x
		on x.content_id=c.content_id and x.duration_min= c.content_duration 
		where r.rating like 'Not%';

		select count(rating)
		from rating_data
		where rating like 'not rated'

--3. Contents with the highest rating
		select c.title , count(c.rating) as [No Of User Rating AWESOME]
		from rating_data as a
		inner join consumption_data as b
		on a.userid=b.userid and a.usersessionid=b.usersessionid
		inner join catalogue_data as c
		on c.content_id= b.content_id and c.duration_min=b.content_duration
		where a.rating='AWESOME'
		group by c.title
		order by [no of user rating AWESOME] desc;

--4. Which content will be removed in the coming time?
		with title_wise_rating
		 as(
		 select c.title , count(c.rating) as overall_rating
		from rating_data as a
		inner join consumption_data as b
		on a.userid=b.userid and a.usersessionid=b.usersessionid
		inner join catalogue_data as c
		on c.content_id= b.content_id and c.duration_min=b.content_duration
		group by c.title
		--order by [total No Of User Rating AWESOME] desc
		),
	   bad_rating
		 as(
		 select c.title , count(c.rating) as Bad_Rating
		from rating_data as a
		inner join consumption_data as b
		on a.userid=b.userid and a.usersessionid=b.usersessionid
		inner join catalogue_data as c
		on c.content_id= b.content_id and c.duration_min=b.content_duration
		where a.rating in ('TERRIBLE','DISMISSED','BAD')
		group by c.title
		--order by [no of user rating AWESOME] desc
		)
		select ba.title, overall_rating, bad_rating,
		(bad_rating *100.00/overall_rating) as [% bad Rating]
		from bad_rating as ba
		inner join title_wise_rating as ta
		on ba.title=ta.title
		where (bad_rating*100.00/overall_rating) >50
		order by bad_rating desc;
		
		

--5. Content from horror categoy
		select title , listed_in , count(r.rating) as rating
		from catalogue_data as c
		inner join consumption_data as x
		on x.content_id=c.content_id and x.content_duration=c.duration_min
		inner join rating_data as r
		on r.userid=x.userid and r.usersessionid=x.usersessionid
		where listed_in like '%Horror%' and r. rating like 'awe%'
		group by title,listed_in
		order by rating desc;

--6.Top rated content from India
		select c.title , count(c.rating) as [No Of User Rating AWESOME]
		from rating_data as a
		inner join consumption_data as b
		on a.userid=b.userid and a.usersessionid=b.usersessionid
		inner join catalogue_data as c
		on c.content_id= b.content_id and c.duration_min=b.content_duration
		where a.rating in ('AWESOME','GOOD')and c.country like '%India%'
		group by c.title
		order by [no of user rating AWESOME] desc;

--===============================================================================================

select * from catalogue_data 
select * from consumption_data 
select * from rating_data 
select * from subscription_data